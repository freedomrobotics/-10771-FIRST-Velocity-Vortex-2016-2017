//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.

// Custom definitions may go here

// Include common definitions from above.
apply from: '../build.common.gradle'

android {
    signingConfigs {
        release {
            storeFile file("key/packagekey.jks")
            storePassword "freedomrobotics"
            keyAlias "FTC_TEAM_10771_KEY"
            keyPassword "freedomrobotics"
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        println('compiling jni code with ndk-build...')
        def ndkDir = android.ndkDirectory
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            commandLine "$ndkDir/ndk-build.cmd",
                    '-C', file('src/main/jni').absolutePath
            // Additional ndk-build arguments, such as NDK_DEBUG, can be provided here
        } else {
            commandLine "$ndkDir/ndk-build",
                    '-C', file('src/main/jni').absolutePath
            // Additional ndk-build arguments, such as NDK_DEBUG, can be provided here
        }
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = android.ndkDirectory
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            commandLine "$ndkDir/ndk-build.cmd",
                    '-C', file('src/main/jni').absolutePath,
                    'clean'
        } else {
            commandLine "$ndkDir/ndk-build",
                    '-C', file('src/main/jni').absolutePath,
                    'clean'
        }
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir "src/main/libs"
    }
}

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    compile 'com.github.bmoliveira:snake-yaml:v1.18-android'
    compile project(':openCVLibrary310')
}
