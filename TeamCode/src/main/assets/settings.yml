# settings.yml
# Use this to define changeable values such as max_power.
# All values are in metric
# Unit of length is millimeters, not meters
# Unit of rotation is degrees (angular velocity is in degrees per second)

# Encoder pulses per full revolution http://ftcforum.usfirst.org/archive/index.php/t-5189.html
# update https://www.reddit.com/r/FTC/comments/3qhfvj/help_with_encoders/

# flags
alliance: red
position: inside

catapult:
  light_tolerance: 0.2 #put in settings(test first)
  ready_position: 1440 #put in settings
  target_position: 14440 #put in settings
  oscillation_max: 0.1 #put in settings
  position_margin: 20
  power_increment: 0.01 #put in settings
  launch_power: 0.8
  use_encoder: false #change in settings
  map_name: launcher

robot:
  initial_position:
    x: 0.0
    y: 0.0
  intial_rotation: 0.0
  size:
    x: 444.5    #width approx 17.5in
    y: 431.8    #length approx 15in

encoder:
  output_pulses: 1440
  encoder_pulses: 28

# The drivetrain's settings.
drivetrain:
  motor_angle: 60.0
  motor_scale: .85
  gear_ratio: 1
  motion:
    max_velocity: 100 # mm/s
    max_acceleration: 100 # mm^2/s
    max_jerk: 100 # mm^3/s
  positional:
    speed: .67
    rotation: .25
    rotational_tolerance: 3 #degrees
    translational_tolerance: 10 #mm
  motor:
    front_left:
      map_name: drive_front_left
      reversed: true
    front_right:
      map_name: drive_front_right
      reversed: false
    back_right:
      map_name: drive_back_left
      reversed: true
    back_left:
      map_name: drive_back_right
      reversed: false
  wheel:
    diameter: 101.6 # 4 inches

# Intake
intake:
  map_name: intake
  reversed: true
  increments_per_second: .2

# Front Bumper-thing Settings
bumper:
  enabled: true
  max_ang_vel: 80.0
  full_rotate: 180.0  #180 degree servo
  max_rotate: 65.0    #programmed limit
  preset: 45.0
  start_pos: 0.0
  left_servo:
    map_name: bumper_left
    reversed: true
    offset: 18.0
  right_servo:
    map_name: bumper_right
    reversed: false
    offset: 0.0

#color sensors
color_sensor:
  side: back
  left:
    map_name: color_sensor_left
    offset: 0.0
  right:
    map_name: color_sensor_right
    offset: 0.0

#Beacon colors
beacon:
  red_alliance:
    min:        #lower range of values
      red: 1
      green: 1
      blue: 1
    max:        #upper range of values
      red: 2
      green: 2
      blue: 2
  blue_alliance:
    min:
      red: 1
      green: 1
      blue: 1
    max:
      red: 2
      green: 2
      blue: 2

auto:
  time:
  encoder:

drive:
  update_using: encoders
  init_with_fieldmap: false
  x_margin: 4.0 #cm
  y_margin: 4.0 #cm
  camera_settings:
    centering_margin: 5.0 #mm
    distance_to_stop: 101.6 #mm
    angle_margin: 5.0 #degrees
    beacon_check_distance: 100.0 #mm

autonomous:
  red_alliance:
    starting_pos:
      x: 10.0
      y: 10.0
      rot: 0.0
    #Compute later
    travel_to_beacon:
      - move 100
      - stop
    travel_to_park:
      - move 100
      - stop
    travel_to_low:
      near:
        - move 100
        - stop
      far:
        - move 100
        - stop
    travel_to_mid:
      near:
        - move 100
        - stop
      far:
        - move 100
        - stop

  blue_alliance:
    starting_pos:
      x: 10.0
      y: 20.0
      rot: 0.0
    #Compute later
    travel_to_beacon:
      - move 100
      - stop
    travel_to_park:
      - move 100
      - stop
    travel_to_low:
      near:
        - move 100
        - stop
      far:
        - move 100
        - stop
    travel_to_mid:
      near:
        - move 100
        - stop
      far:
        - move 100
        - stop

  # This is the autonomous commands!
  command_list:
    - move 500
    - travel_to_beacon
    - drop_off_people
    - move -1000
    - climb_mountain_low near
    - stop

  # The below define the other commands that aren't alliance specific (make up your own if you want)
  drop_off_people:
    - winch_servo 50
    - winch_motor out,2
    - winch_servo down,5
    - winch_motor in,1


